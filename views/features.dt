extends layout

block title
	- title = "Features";

block vibed.navigation
	ul.bs-local
		li
			a(href="#simplicity") Simplicity
			ul
				li: a(href="#fibers") Fibers
				li: a(href="#compact-api") Compact API
				li: a(href="#zero-downtime") Zero-downtime changes
		li
			a(href="#productivity") Productivity
			ul
				li: a(href="#web-framework") Full integrated web framework
				li: a(href="#native-db") Native database drivers
				li: a(href="#raw-sockets") Raw network and file handling
				li: a(href="#concurrency") Generic concurrency tools
				li: a(href="#ui-integration") Graphical user interface integration
		li
			a(href="#performance") Performance
			ul
				li: a(href="#aio") Asynchronous I/O
				li: a(href="#multi-threading") Multi-threading
				li: a(href="#native-code") Natively compiled code
				li: a(href="#diet-templates") Diet templates
				li: a(href="#load-balancing") Load balancing

block vibed.body
	section
		h2#simplicity Simplicity


		section
			h3#fibers Fiber based pseudo-blocking programming model

			img.leftFlow(src="images/feature_fibers.png")

			p The key idea behind vibe.d was to take the fast and resource friendly <a href="#aio">asynchronous I/O</a> model (AIO) and make it comfortable to use. Some other frameworks or toolkits such as <a class="extern" href="https://nodejs.org/" target="_blank">node.js</a> directly expose the event based interface of AIO using callback functions. While this is a workable approach, it has several drawbacks.

			p First and foremost, it often becomes tedious and confusing to write sequences of code (e.g. performing multiple consecutive database queries). Each step will introduce a new callback with a new scope, error callbacks often have to be handled separately. Especially the latter is a reason why it is tempting to just perform lax error handling.

			p Another consequence of asynchronous callbacks is that there is no meaningful call stack. Not only can this make debugging more difficult, but features such as exceptions cannot be used effectively in such an environment.

			p The approach of vibe.d is to use asynchronous I/O under the hood, but at the same time make it seem as if all operations were synchronous and blocking, just like ordinary I/O.

			p What makes this possible is D's support for so called <a class="extern" href="https://dlang.org/phobos/core_thread_fiber.html" target="_blank">fibers</a> (also often called co-routines). Fibers behave a lot like threads, just that they are actually all running in the same thread. As soon as a running fiber calls a special <code>yield()</code> function, it returns control to the function that started the fiber. The fiber can then later be resumed at exactly the position and with the same state it had when it called <code>yield()</code>. This way fibers can be multiplexed together, running quasi-parallel and using each threads capacity as much as possible.

			p All of this usually happens behind the curtain of the vibe.d API, so that everything <em>feels</em> like just working with normal threads and blocking operations. All blocking functions, such as <code>sleep()</code> or <code>read()</code> will yield execution whenever they need to wait for an event and let themselves resume when the event occurs.

			p Using these tools, the event based nature of AIO is completely hidden from the user of the library. It also blends seamlessly with the built-in support for multi-threading. All concurrent operation are done using so called <a href="api/vibe.core.core/runTask">tasks</a>. Every task runs inside of a single fiber and is multiplexed together with other tasks that run at the same time. To the user of the toolkit there is usually no visible difference between a task and a thread.

			p Having said all that, vibe.d <em>can</em> also be used without any fibers and no event loop if it has to, resembling the standard blocking I/O model.

		section
			img.rightFlow(src="images/feature_api.png")
			h3#compact-api Compact API

			p There is a strong focus on a short and simple API. Common tasks are kept as short and high level as possible, while still allowing fine grained control if needed. By using some of D's advanced features, typical vibe.d based programs reach a level of conciseness that usually only scripting languages such as Ruby can offer.

		section
			h3#zero-downtime Zero-downtime changes

			p <span style="color: #fa4">[work-in-progress]</span> An
				a(href="#load-balancing")
				| integrated load balancer is able to dynamically compile, run and test new processes before switching them live after the code has been modified. This allows for seamless and low-risk changes on live-systems.

		section
			h3#exception-based Exception based error handling

			p Usually, exception handling is restricted to local error handlers in event-based environments - it is impossible to wrap a sequence of events into a try-catch block, because every operation creates a new scope when callbacks are involved. vibe.d with its fiber based approach on the other hand has full support for exception handling.

			p A <a href="#fibers">fiber</a> behaves almost exactly like a thread regarding the stack; a single consistent call stack exists across all events that are handled in sequence. This way it becomes possible to naturally use exception handling, and especially in a web service environment exceptions are the ideal form of error handling.

			p Exceptions have the extremely useful feature that you can barely ignore them. As such, it is much more difficult to introduce subtle bugs and security holes by unintentionally ignoring error conditions. Any uncaught exceptions will automatically generate an error page and log all useful information in case of HTTP services.

	section
		h2#productivity Productivity

		section
			img.rightFlow(src="images/feature_web.png")
			h3#web-framework Full integrated web framework

			p The vibe.d library contains a complete set of tools needed for website and web service development. In addition to a HTTP 1.0/1.1 server, static file serving, an efficient template system, WebSockets, sessions and other features are already integrated. Surrounding features include a markdown filter, MongoDB and Redis drivers, cryptography, natural JSON and BSON support and a simple SMTP client.

			p There are also means to automatically generate JSON/REST or HTML form based interface from D classes, removing a lot of work and potential for bugs due to avoiding boilerplate code. The REST interface generator supports generation of both, the server and the client end, and as such can be used as a convenient RPC mechanism.

		section.clear
			h3#native-db Native database drivers
			img.leftFlow(src="images/feature_db.png")

			p The core library contains built-in support for <a href="docs#mongo">MongoDB</a> and <a href="docs#redis">Redis</a> databases. These drivers provide a default for fast and flexible data storage. More database drivers are available in the <a href="https://code.dlang.org/">DUB package registry</a>, for example a vibe.d compatible <a href="https://github.com/rejectedsoftware/mysql-native">MySQL</a> driver.

			p Making existing drivers compatible is easy to do thanks to the blocking nature of vibe.d's API. The only thing that has to be done in most cases is to replace the socket calls (<code>send()</code>, <code>recv()</code>, <code>connect()</code> etc.) with the corresponding vibe.d functions. A <a href="blog/posts/writing-native-db-drivers">blog post</a> gives an overview of what needs to be done using the MySQL driver as an example.

		section.clear
			h3#raw-sockets Raw network and file handling

			p Of course, raw TCP/UDP and file access is supported by the toolkit to enable custom protocols and file formats. I/O happens through a blocking stream interface that effectively hides the fact that the underlying operations are actually event based.

		section
			h3#concurrency Generic concurrency tools

			p Apart from I/O operations, all the usual tools for generic programming tasks are supported:

			ul
				li <a href="api/vibe.core.core/sleep"><code>sleep()</code></a> pauses execution of the current tasks for a specific amount of time
				li <a href="api/vibe.core.core/setTimer">Timers</a> enable asynchronous scheduling of callbacks
				li <a href="api/vibe.core.sync/TaskMutex">Mutexes</a> and <a href="api/vibe.core.sync/TaskCondition">condition variables</a> allow for sharing data access between multiple threads without interfering with the event loop
				li Support for <a href="api/vibe.core.concurrency/">message passing</a>
				li <a href="api/vibe.stream.taskpipe/TaskPipe">Data pipes</a> for streaming data between tasks/threads

		section
			h3#ui-integration Graphical user interface integration

			p Contrary to most other frameworks supporting asynchronous I/O, vibe.d fully integrates with the UI event loop, so that it can be used to power applications with a graphical user interface.

			p For Windows, there is a native event driver implementation that makes use of the <a href="https://msdn.microsoft.com/en-us/library/windows/desktop/ms684245(v=vs.85).aspx"><code>MsgWaitForMultipleObjectsEx</code></a> function to process window messages together with I/O or concurrency events. For systems running X11, it's possible to use <a href="api/vibe.core.core/createFileDescriptorEvent"><code>createFileDescriptorEvent</code></a> to listen on the display connection instead of using <code>XNextEvent</code>. Finally, macOS has an event loop based on `CFRunLoop`, which processes CoreFramework events, as well as basic kqueue events.

			p An advanced example of this is #[a(href="https://aspect.bildhuus.com/") Aspect], our photo management application that uses vibe.d for all of its I/O and concurrency needs. Tasks are a great fit for the asynchronous nature of the GUI system APIs, allowing to turn most event/callback based code into clear procedural code with a linear execution path. This results in both, more readable and more robust code. For Aspect, we are using direct Win32 API access on Windows and SDL2 on Linux and macOS.


	section
		h2#performance Performance

		section
			h3#aio Asynchronous I/O operations
			img.leftFlow(src="images/feature_event.png")

			p Instead of using classic blocking I/O together with multi-threading for doing parallel network and file operations, all operations are using asynchronous operating system APIs. By default, <a class="extern" href="https://libevent.org/" target="_blank">libevent</a> is used to access these APIs operating system independently.

			p Using asynchronous I/O has several advantages, the main point being that the memory overhead is much lower. This is because only a single hardware thread is needed to handle an arbitrary number of concurrent operations. The thread typically rests waiting for events and is woken up by the operating system as soon as new data arrives, a new connection is established, or an error occurs. After each initiated blocking operation (e.g. writing data to a socket), the thread will go back to sleep and let the operating system execute the operation in the background.

			p Another important aspect for speed is that, because there is only one or a few threads necessary, it is often possible to save a lot of expensive thread context switches. However, note that if the application has to do a lot of computations apart from the actual I/O operations, vibe.d has full support for
				a(href="#multi-threading") multi-threading
				| to fully exploit the system's multi-core CPU.

			p Because using the asynchronous event based model is often more involved regarding the application implementation,
				a(href="#fibers") fibers
				| are used together with an event based scheduler to give the impression of classic blocking calls and multi-threading, thus hiding the additional complexities, while retaining the performance characteristics of asynchronous I/O.

		section
			h3#multi-threading Multi-threading support

			p While the performance is usually very good in a single-threaded application due to the use of <a href="#aio">asynchronous I/O</a> and <a href="#fibers">fibers</a>, there are applications that can greatly benefit from using multiple cores. vibe.d supports multiple ways to exploit this additional computational power, leaving the decision for the threading architecture to the application writer.

			p Apart from allowing the use of low-level <a href="https://dlang.org/phobos/core_thread.html#.Thread">D threads</a>, a thread pool is provided, which is used for any task started with <a href="api/vibe.core.core/runWorkerTask"><code>runWorkerTask</code></a> instead of <a href="api/vibe.core.core/runTask"><code>runTask</code></a>. This is mainly useful for running computationally expensive operations, such as decoding images, alongside the normal program flow, but it can also be used for better performance of I/O heavy tasks in certain cases.

			p The library is very flexible in the way that multi-threading can be employed and makes sure that no low-level race-conditions can occur, as long as no unsafe operations, such as <code>cast()</code>s or <code>__gshared</code> variables, are used. The following list shows some typical threading architectures:

			dl.feat
				dt Distributed processing of incoming connections
				dd The HTTP server (as well as any other TCP based server) can be instructed to process incoming connections across the worker threads of the thread pool instead of in the main thread. For applications that don't need to share state across different connections in the process, this can increase the maximum number of requests per second linearly with the number of cores in the system. This feature is enabled using the <a href="api/vibe.http.server/HTTPServerOption.distribute"><code>HTTPServerOption.distribute</code></a> or <a href="api/vibe.core.net/TCPListenOptions.distribute"><code>TCPListenOptions.distribute</code></a> settings.

				dt Using worker tasks for computations
				dd Computationally expensive tasks can be off-loaded from the main thread by performing them with <a href="api/vibe.core.core/runWorkerTask"><code>runWorkerTask</code></a>. Any such task will be executed in the thread pool. This approach is useful whenever an application has such computationally expensive tasks to do, because it allows pure I/O tasks to stay unaffected by heavy computational load. Probably the most common example of such a task is image processing/decoding/encoding.

				dt Using plain D threads
				dd Normal D threads can also be used together with vibe.d. This is important when the threading primitives of the D standard library are used. Apart from the <a href="https://dlang.org/phobos/core_thread.html#.Thread">D core threads</a>, these are <a href="https://dlang.org/phobos/std_parallelism.html"><code>std.parallelism</code></a> and <a href="https://dlang.org/phobos/std_concurrency.html"><code>std.concurrency</code></a>. Note however, that parts of the D standard library shouldn't be mixed with vibe.d's I/O functions, because they block the event loop. Most notably, the message passing functions in <code>std.concurrency</code> are currently<a href="https://github.com/D-Programming-Language/phobos/pull/1910/">*</a> not compatible with vibe.d's event loop and should be replaced with the ones in <a href="api/vibe.core.concurrency/"><code>vibe.core.concurrency</code></a>.

			p Note that vibe.d also includes experimental library based support of <a href="api/vibe.core.concurrency/makeIsolated">isolated</a> and <a href="api/vibe.core.concurrency/ScopedRef">scoped</a> references. These allow mutable data to be passed between threads without having to use mutexes or similar means to synchronize data access. This is especially useful when transferring the data used in worker tasks between the worker thread and the main thread.

		section
			h3#native-code Natively compiled code
			img.rightFlow(src="images/feature_native.png")

			p Vibe.d is written in the <a class="extern" href="https://dlang.org" target="_blank">D Programming Language</a>. D is a C-style language that compiles down to native machine code with minimal runtime overhead. In addition to being fast, D offers a number of features that allow additional performance improvements and especially code readability, safety and usability improvements compared to other languages such as C++.

			p Some notable features are listed here, but there are a lot of additional things which would be beyond the scope of this text. See the
				a.extern(href="https://dlang.org/comparison.html", target="_blank") D feature page
				| or the <a class="extern" href="https://ddili.org/ders/d.en/index.html" target="_blank">Programming in D</a> online book for a more general overview.

			dl.feat
				dt Templates, mixins and compile-time functions
				dd
					p The meta-programming system in D is extremely powerful. Templates (comparable to C++ templates) support variadic parameters, as well as string and alias parameters - a feature which enables very comfortable compile-time interfaces.

					p The ultimate power is given by the possibility to execute ordinary functions at compile time, as well as the ability to compile a string given at compile time as D code. This functionality is similar to JavaScript's <code>eval()</code> function, just that the result is statically compiled to machine code (and without the runtime security implications of <code>eval()</code>).

					p These features together with the possibility to read files at compile time have enabled the powerful <a href="#diet-templates">Diet template</a> parser.

				dt Garbage collection
				dd
					p The D runtime offers built-in garbage collection, which enables some interesting possibilities, apart from the obvious advantage of no need for manual memory management and the associated risk of memory leaks and dangerous dangling references.

					p Most notably, it allows to work with immutable data, such as strings or objects, which can be safely referenced and passed between threads without any synchronization overhead. When passing data between threads, it is statically enforced that the data is safe to be referenced from multiple threads. This avoids a whole class of difficult to reproduce and track down bugs common in multi-threaded code of many other languages.

				dt Closures and lambdas
				dd
					p A feature also known from some scripting and functional languages, but also C# and a few others are closures and lambdas. They allow to specify callback functions in a very compact and readable way. In turn they tend to have a strong influence on the API design, as they can make computationally efficient or safe APIs actually bearable (or even pleasant) to use.

				dt Properties
				dd
					p Properties are functions that look like they were a field of a class or struct. They are used throughout the API to get a logical and intuitive interface without all clamps and additional typing needed for normal function calls.

				dt Module system
				dd
					p D's module system is similar to the one used in Java. Among other things it encodes the dependencies between different modules (D files) in a semantically clear way. Using this information, it becomes possible to build whole applications just by specifying the root file (app.d) on the command line. The dependencies can be found recursively. The <a href="https://dlang.org/rdmd.html">rdmd</a> build tool included with the D compiler, which is supported by the <a href="https://github.com/rejectedsoftware/dub">DUB package manager</a>, works this way.

				dt Arrays and slices
				dd
					p Arrays support native slicing with a very natural syntax. Together with the garbage collector they enable extremely fast string parser implementations which are safe (bounds checking) and easy to read at the same time.

				dt Concise and readable syntax
				dd
					p The syntax in general is very clean and to the point - especially compared to its perhaps closest relative, C++. But it doesn't need to fear modern scripting languages such as Ruby and Python in this regard either. Apart from the occasional need to specify an explicit type (types can be inferred using <code>auto</code>), you will discover that there is not much to miss and that development using D is highly efficient.

		section
			h3#diet-templates Compile-time "Diet" templates
			img.leftFlow(src="images/feature_diet.png")

			p vibe.d has built-in support for <a href="docs#html-templates">Diet HTML templates</a> based on the <a class="extern" href="https://pugjs.org/" target="_blank">Pug</a> template syntax known from node.js which in turn is based on <a class="extern" href="https://haml-lang.com/" target="_blank">Haml</a>. These templates remove all the syntax overhead that is inherent to HTML's tag based notation and also allow the inline specification of dynamic elements. Typically, these elements are written in a dynamic scripting language (JavaScript in case of Pug).

			p In vibe.d, however, templates can contain embedded D code. The templates are read and parsed while the application is being compiled and optimized D code is generated for them. This means that the runtime overhead for those templates is non-existent - there are no disk accesses, no parsing and there is no string copying involved because all of this has already been done before the application has even started.

			p At the same time you can program in the same language as for the rest of the application, which makes for a very consistent development experience.

		//-section
			h3#load-balancing Integrated load balancing

			p <span style="color: #fa4">[work-in-progress]</span> The installation package contains a load balancer application that can almost seamlessly scale your vibe server installations as needed. But apart from load balancing, it has a feature which is maybe even more interesting.

			p When the sources for the application have been changed, the load balancer can automatically compile and run the modified application and seamlessly switch to it. The old application is shut down as soon as there are no more clients connected.

			p In the future, running an automated test suite before the new application instance is switched live will be supported. Rapid development processes with safe modifications on the live system become possible this way.
